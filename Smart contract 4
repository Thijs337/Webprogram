pragma solidity 0.5.1;

contract MyContract {
  mapping(address => uint256) public balances;
  address payable wallet;
  
  
  event Purchase(
      address indexed _buyer,
      uint256 _amount
      );
  
  constructor(address payable _wallet) public {
      wallet = _wallet; 
  }
  
  
  function() external payable{
      buyToken();
  }
  
    function buyToken() public payable{
        // buy a token
        balances[msg.sender] += 1; 
        
        // send ether to the wallet
        wallet.transfer(msg.value);
        emit Purchase(msg.sender, 1);
        
    }
}

//2 smartcontracts die met elkaar kunnen verbinden/data uitwisselen.

pragma solidity 0.5.1;

contract ERC20Token{
    string public name;
      mapping(address => uint256) public balances;
      
      function mint() public{
        balances[tx.origin] ++; 
      }
}

contract MyContract {
  address payable wallet;
  address public token;
  
  constructor(address payable _wallet, address _token) public {
      wallet = _wallet; 
      token = _token;
  }
  
  
  function() external payable{
      buyToken();
  }
  
    function buyToken() public payable{
        ERC20Token(address(token)).mint();
        
        // send ether to the wallet
        wallet.transfer(msg.value);
    }
} 
